[{"id":"6b8bd657a09c1927","type":"tab","label":"Gráficos","disabled":false,"info":"","env":[]},{"id":"b0568990bc917d0b","type":"ui_chart","z":"6b8bd657a09c1927","name":"Temperature","group":"9cbd6f03243096a9","order":1,"width":"9","height":"8","label":"Temperatura","chartType":"line","legend":"true","xformat":"auto","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":"3","removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":930,"y":300,"wires":[[]]},{"id":"9a169724f74cfb54","type":"AWS DynamoDB","z":"6b8bd657a09c1927","aws":"6e4ea6cf4fd6c2bd","operation":"Scan","Statements":"","RequestItems":"","TableName":"IoTSensorData","BackupName":"","GlobalTableName":"","ReplicationGroup":"","AttributeDefinitions":"","KeySchema":"","BackupArn":"","Key":"","ExportArn":"","Statement":"","TransactStatements":"","TableArn":"","S3Bucket":"","ResourceArn":"","Item":"","TargetTableName":"","Tags":"","TransactItems":"","TagKeys":"","PointInTimeRecoverySpecification":"","ContributorInsightsAction":"","ReplicaUpdates":"","TimeToLiveSpecification":"","name":"","x":410,"y":240,"wires":[["39bdd16e0294f33a","3f8b943f26fad97b","973a2dcac62ec793","d86f3e2cbcee4c6f"],[]]},{"id":"fea401a9c06b34af","type":"inject","z":"6b8bd657a09c1927","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"1200","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":200,"y":80,"wires":[["43cb4a65c1ef240e","fca0e14667df95c6"]]},{"id":"43cb4a65c1ef240e","type":"function","z":"6b8bd657a09c1927","name":"Payload for DB request","func":"// msg.payload = {\n//     TableName: \"IoTSensorData\",\n//     Key: {\n//         SensorID: { S: \"DHT11\" },\n//         // Timestamp: { S: \"2024-10-02T02:48:04.857Z\" }\n//     }\n// };\n// return msg;\n\nmsg.payload = {\n    TableName: \"IoTSensorData\",\n    KeyConditionExpression: \"SensorID = :sensorId\",\n    ExpressionAttributeValues: {\n        \":sensorId\": { \"S\": \"DHT11\" }\n    }\n};\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":160,"wires":[["9a169724f74cfb54","28a2a89a75ac2a71"]]},{"id":"39bdd16e0294f33a","type":"function","z":"6b8bd657a09c1927","name":"Data for temperature chart","func":"// // Exemplo de dados retornados pelo GetItem\n// const item = msg.payload.Item;\n\n// // Preparar os dados para o gráfico\n// const dataPoints = [{\n//     x: item.Timestamp.S,  // Timestamp (assumido como string)\n//     y: parseFloat(item.Temperature.N)  // Temperatura como número\n// }];\n\n// // Formatar os dados para o gráfico no dashboard\n// msg.payload = [{\n//     series: [\"Temperatura\"],\n//     data: [dataPoints],\n//     labels: [\"Temperatura\"]\n// }];\n\n// return msg;\n\n// Exemplo de dados retornados pelo Query\nconst items = msg.payload.Items;  // Agora é uma lista de itens\n\n// Preparar os dados para o gráfico\nconst dataPoints = items.map(item => ({\n    x: item.Timestamp.S,  // Timestamp (assumido como string)\n    y: parseFloat(item.Temperature.N)  // Temperatura como número\n}));\n\n// Formatar os dados para o gráfico no dashboard\nmsg.payload = [{\n    series: [\"Temperatura\"],\n    data: [dataPoints],\n    labels: [\"Temperatura\"]\n}];\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":720,"y":300,"wires":[["b0568990bc917d0b"]]},{"id":"3f8b943f26fad97b","type":"debug","z":"6b8bd657a09c1927","name":"debug 2","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":700,"y":240,"wires":[]},{"id":"28a2a89a75ac2a71","type":"debug","z":"6b8bd657a09c1927","name":"debug 3","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":620,"y":140,"wires":[]},{"id":"973a2dcac62ec793","type":"function","z":"6b8bd657a09c1927","name":"Data for humidity chart","func":"// Exemplo de dados retornados pelo Query\nconst items = msg.payload.Items;  // Agora é uma lista de itens\n\n// Preparar os dados para o gráfico\nconst dataPoints = items.map(item => ({\n    x: item.Timestamp.S,  // Timestamp (assumido como string)\n    y: parseFloat(item.Humidity.N)  // Temperatura como número\n}));\n\n// Formatar os dados para o gráfico no dashboard\nmsg.payload = [{\n    series: [\"Umidade\"],\n    data: [dataPoints],\n    labels: [\"Umidade\"]\n}];\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":720,"y":360,"wires":[["f08e939b51c69987"]]},{"id":"f08e939b51c69987","type":"ui_chart","z":"6b8bd657a09c1927","name":"Humidity","group":"9cbd6f03243096a9","order":2,"width":"9","height":"8","label":"Umidade","chartType":"line","legend":"true","xformat":"auto","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":"3","removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":920,"y":360,"wires":[[]]},{"id":"fca0e14667df95c6","type":"debug","z":"6b8bd657a09c1927","name":"debug 4","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":460,"y":80,"wires":[]},{"id":"10622ce26f1ae15f","type":"ui_table","z":"6b8bd657a09c1927","group":"9cbd6f03243096a9","name":"Tabela","order":3,"width":"18","height":"10","columns":[{"field":"Timestamp","title":"Data","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"Temperature","title":"Temperatura (ºC)","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}},{"field":"Humidity","title":"Umidade (%)","width":"","align":"left","formatter":"plaintext","formatterParams":{"target":"_blank"}}],"outputs":0,"cts":false,"x":850,"y":480,"wires":[]},{"id":"d86f3e2cbcee4c6f","type":"function","z":"6b8bd657a09c1927","name":"Data for table","func":"// Exemplo de dados retornados pelo Query\nconst items = msg.payload.Items;  // Lista de itens do Query\n\n// Função para formatar a data\nfunction formatDate(timestamp) {\n    const date = new Date(timestamp);\n    return date.toLocaleString('pt-BR', {  // Formata para o padrão brasileiro\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false\n    });\n}\n\n// Preparar os dados para a tabela\nconst tableData = items.map(item => ({\n    Timestamp: formatDate(item.Timestamp.S),  // Timestamp como string\n    Temperature: parseFloat(item.Temperature.N),  // Temperatura como número\n    Humidity: parseFloat(item.Humidity.N)  // Umidade como número\n}));\n\n// // Formatar os dados para a tabela no dashboard\n// msg.payload = {\n//     \"rows\": tableData  // Define as linhas da tabela com os dados formatados\n// };\n\nmsg.payload = tableData;\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":620,"y":480,"wires":[["10622ce26f1ae15f"]]},{"id":"9cbd6f03243096a9","type":"ui_group","name":"Histórico","tab":"2370a715b9d3ca04","order":1,"disp":true,"width":"18","collapse":false,"className":""},{"id":"6e4ea6cf4fd6c2bd","type":"amazon config","name":"AWS","region":"us-east-2","proxyRequired":false,"proxy":""},{"id":"2370a715b9d3ca04","type":"ui_tab","name":"Gráficos","icon":"dashboard","order":2,"disabled":false,"hidden":false}]